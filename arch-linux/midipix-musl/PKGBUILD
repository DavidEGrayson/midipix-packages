# Maintainer: David Grayson <davidegrayson@gmail.com>

# TODO: what does "-e install_no_complex" mean, and do we need to make
# this into a multi-stage package like gcc?

_target=x86_64-nt64-midipix
_arch=nt64
_muslver=1.1.12

pkgname=$_target-musl-git
provides=($_target-musl)
conflicts=($_target-musl)
pkgver=1.1.12.r47.c5e6e59
pkgrel=1
pkgdesc="C standard library implementation (musl) for midipix 64-bit target"
arch=('i686' 'x86_64')
url="http://www.musl-libc.org/"
license=('TODO')
makedepends=($_target-gcc-stage1 lazy)
options=(!strip)
source=("http://www.musl-libc.org/releases/musl-${_muslver}.tar.gz"
        "git://midipix.org/mmglue")
sha256sums=('720b83c7e276b4b679c0bffe9509340d5f81fd601508e607e708177df0d31c0e'
            'SKIP')

pkgver() {
  cd "${srcdir}/mmglue"
  printf "%s.r%s.%s" "$_muslver" "$(git rev-list --count HEAD)" "$(git rev-parse --short HEAD)"
}

prepare() {
  cd "${srcdir}/musl-${_muslver}"
  cp -R ../mmglue/* .
}

build() {
  rm -rf "${srcdir}/build"
  mkdir "${srcdir}/build"

  cd "${srcdir}/build"

  export lz_cflags_debug="-g3 -O0"  # for now, allow easy debugging
  lazy \
      -x config \
      -t $_target \
      -a $_arch \
      -c gcc \
      -n musl \
      -p "../musl-${_muslver}" \
      -f "${pkgdir}/usr/${_target}"

  ./lazy -x build -e libc_no_complex
}

package() {
  cd "${srcdir}/build"

  # Note: Thelibraries seem to get re-linked during this time because
  # install_no_complex.
  ./lazy -x build -e install_no_complex

  # Because lazy doesn't support DESTDIR or equivalent, our build directory gets
  # baked into musl-gcc.specs.
  sed -i -e "s|${pkgdir}|" "${pkgdir}/usr/${_target}/lib/musl-gcc.specs
}
