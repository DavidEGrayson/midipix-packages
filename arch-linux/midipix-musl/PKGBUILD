# Maintainer: David Grayson <davidegrayson@gmail.com>

# TODO: for stage1 midipix, I think what is done in arch/nt32/src/nt32/chelper.S
# is not very safe.  Could we get by without defining those dummy functions?
# Could we at least perform a division by zero or something in them?

_target=x86_64-nt64-midipix
_arch=nt64
_muslver=1.1.12

if [ -n "$MIDIPIX_MUSL_STAGE1" ]; then
  pkgname=$_target-musl-stage1-git
  provides=($_target-musl-stage1)
  replaces=()
  conflicts=()
  makedepends=($_target-gcc-stage1 lazy)
else
  pkgname=$_target-musl-git
  provides=($_target-musl $_target-musl-stage1)
  replaces=($_target-musl-stage1)
  conflicts=($_target-musl-stage1)
  makedepends=($_target-gcc-stage2 lazy)
fi
pkgver=1.1.12.r48.e43f5af
pkgrel=1
pkgdesc="C standard library implementation (musl) for midipix 64-bit target"
arch=('any')
url="http://www.musl-libc.org/"
license=('TODO')
options=(!strip)
source=("http://www.musl-libc.org/releases/musl-${_muslver}.tar.gz"
        "git://midipix.org/mmglue")
sha256sums=('720b83c7e276b4b679c0bffe9509340d5f81fd601508e607e708177df0d31c0e'
            'SKIP')

pkgver() {
  cd "${srcdir}/mmglue"
  printf "%s.r%s.%s" "$_muslver" "$(git rev-list --count HEAD)" "$(git rev-parse --short HEAD)"
}

prepare() {
  cd "${srcdir}/musl-${_muslver}"
  cp -R ../mmglue/* .
}

build() {
  rm -rf "${srcdir}/build"
  mkdir "${srcdir}/build"

  cd "${srcdir}/build"

  export lz_cflags_debug="-g3 -O0"  # for now, allow easy debugging
  lazy \
      -x config \
      -t $_target \
      -a $_arch \
      -c gcc \
      -n musl \
      -p "../musl-${_muslver}" \
      -f "${pkgdir}/usr/${_target}"

  if [ -n "$MIDIPIX_MUSL_STAGE1" ]; then
    ./lazy -x build -e libc_no_complex
  else
    ./lazy -x build -e libc
  fi
}

package() {
  cd "${srcdir}/build"

  # Note: The libraries seem to get re-linked during this time, which
  # is annoying.
  if [ -n "$MIDIPIX_MUSL_STAGE1" ]; then
    ./lazy -x build -e install_no_complex
  else
    ./lazy -x build -e install
  fi

  # Because lazy doesn't support DESTDIR or equivalent, our build directory gets
  # baked into musl-gcc.specs.
  sed -i -e "s|${pkgdir}||g" "${pkgdir}/usr/${_target}/lib/musl-gcc.specs"
}
