# Maintainer: David Grayson <davidegrayson@gmail.com>

# Note: Right now this package just does "GCC, stage 1" from
# http://git.midipix.org/cgit.cgi/cbb/cbb-gcc/tree/cbb-midipix-cross-gcc.sh

_target=x86_64-nt64-midipix
_gccver=4.6.4

if [ -z "$PKG_STAGE" ]; then
  PKG_STAGE=9
fi

if [ "$PKG_STAGE" -eq 1 ]; then
  # Stage 1: just a compiler
  pkgname=$_target-gcc-stage1-git
  provides=($_target-gcc-stage1)
  depends=(zlib libmpc $_target-binutils)
  makedepends=(mpfr)
elif [ "$PKG_STAGE" -eq 2 ]; then
  # Stage 2: compiler and libgcc
  pkgname=$_target-gcc-stage2-git
  provides=($_target-gcc-stage2 $_target-gcc-stage1)
  conflicts=($_target-gcc-stage1{,-git})
  depends=(zlib libmpc $_target-binutils $_target-musl-stage1 $_target-psxstub)
  makedepends=(mpfr)
else
  pkgname=$_target-gcc-git
  provides=($_target-gcc $_target-gcc-stage{1,2})
  conflicts=($_target-gcc-stage{1,2}{,-git})
  depends=(zlib libmpc $_target-binutils $_target-musl)
  makedepends=(mpfr)
fi
pkgver=4.6.4.r58.53d53a0
pkgrel=1
pkgdesc="The GNU Compiler Collection - cross compiler for midipix 64-bit target"
arch=('i686' 'x86_64')
url="http://gcc.gnu.org/"
license=('GPL' 'LGPL' 'FDL')
source=("git://midipix.org/cbb/cbb-gcc-${_gccver}")
sha256sums=('SKIP')
options=(!strip)  # TODO: strip the native binaries though

pkgver() {
  cd "${srcdir}/cbb-gcc-${_gccver}"
  printf "%s.r%s.%s" "$_gccver" "$(git rev-list --count HEAD)" "$(git rev-parse --short HEAD)"
}

prepare() {
  cd "${srcdir}/cbb-gcc-${_gccver}"

  # Set the NATIVE_SYSTEM_HEADER_DIR in the Makefile to /include, because
  # configure.ac decides to append this to $(TARGET_SYSTEM_ROOT) in order to
  # set $(CROSS_SYSTEM_HEADER_DIR).  By default it is /usr/include, which is
  # wrong, because /usr/x86_64-nt64-midipix/usr/include is not where we want
  # to store our headers.  The way that other Arch Linux compilers deal with
  # this is that they use GCC 5 and use the new configure option
  # --with-native-system-header-dir.
  sed -i 's|NATIVE_SYSTEM_HEADER_DIR = /usr/include|NATIVE_SYSTEM_HEADER_DIR = /include|' gcc/Makefile.in

  # Make the stmp-fixinc Makefile task not run.  If it runs, then in stage 1
  # it will give a fatal error about /usr/x86_64-nt64-midipix/include being abset.
  echo "STMP_FIXINC =" >> gcc/config/i386/t-midipix
}

build() {
  rm -rf "${srcdir}/build"
  mkdir "${srcdir}/build"

  cd "${srcdir}/build"

  # TODO: try to incorporate the flags from makepkg.conf instead of overriding them

  GCCFLAGS="--include $(pwd)/../cbb-gcc-${_gccver}/libc/cbb-musl-pe.h"
  GCCTARGET_FLAGS="-DIN_TARGET_LIBRARY_BUILD --sysroot=/usr/$_target"

  export CPPFLAGS=""  # see the note about _FORTIFY_SOURCE in binutils script
  export CFLAGS="$GCCFLAGS"
  export CXXFLAGS="$GCCFLAGS"

  export CFLAGS_FOR_BUILD="$GCCFLAGS"
  export CPPFLAGS_FOR_BUILD="$GCCFLAGS"
  export CXXFLAGS_FOR_BUILD="$GCCFLAGS"

  export CFLAGS_FOR_TARGET="$GCCTARGET_FLAGS"
  export XGCC_FLAGS_FOR_TARGET="$GCCTARGET_FLAGS"
  export CPPFLAGS_FOR_TARGET="$GCCTARGET_FLAGS"
  export CXXFLAGS_FOR_TARGET="$GCCTARGET_FLAGS"
  export LIBCFLAGS_FOR_TARGET="$GCCTARGET_FLAGS"

  export cbb_neutral_libiberty=no
  export cbb_target=$_target
  export cbb_xgcc_for_specs="$(pwd)/gcc/xgcc"
  export cbb_ldflags_for_target="--sysroot=/usr/${_target}"
  export cbb_sysroot_for_libgcc="/usr/$_target"
  export cbb_cflags_for_stage1="$CFLAGS_FOR_BUILD"
  export cbb_cflags_for_stage2="$CFLAGS_FOR_BUILD"
  export cbb_cflags_for_stage3="$CFLAGS_FOR_BUILD"
  export cbb_cflags_for_stage4="$CFLAGS_FOR_BUILD"

  MORE_CFG=""

  MORE_CFG+=" --with-sysroot=/usr/${_target}"

  # Can't use these options for stage1 because GCC complains about the include
  # directories not existing yet.
  # TODO: try to get $(inhibit_libc) set as well
  if [ "$PKG_STAGE" -ge 9 ]; then
    echo hi
    # We can use this in GCC 5:
    # MORE_CFG+=" --with-native-system-header-dir=/include"
  fi

  ../cbb-gcc-${_gccver}/configure \
    --target=${_target} \
    --prefix=/usr \
    --libexecdir=/usr/lib \
    --with-as=/usr/bin/${_target}-as \
    --with-ld=/usr/bin/${_target}-ld \
    --with-system-zlib \
    --with-pkgversion="${pkgver}" \
    --with-bugurl="http://midipix.org/" \
    --disable-nls \
    --disable-multilib \
    --disable-libmudflap \
    --disable-obsolete \
    --disable-symvers \
    --disable-sjlj-exceptions \
    --with-fpmath=sse \
    --enable-multiarch \
    --enable-shared \
    --enable-initfini-array \
    --enable-threads=posix \
    --enable-lto \
    --enable-__cxa_atexit \
    --enable-gnu-indirect-function \
    --enable-gnu-unique-object \
    --enable-libstdcxx-debug \
    --enable-canonical-system-headers \
    --enable-languages=c,c++,objc,lto \
    --enable-secureplt \
    --enable-debug \
    --disable-bootstrap \
    $MORE_CFG
  touch configure.skip

  echo "---- all-gcc"
  make all-gcc

  if [ "$PKG_STAGE" -ge 2 ]; then
    echo "---- all-target-libgcc"
    make all-target-libgcc
  fi

  if "$PKG_STAGE" -ge 9 ]; then
    echo "---- all"
    make
  fi
}

package() {
  cd "${srcdir}/build"

  make DESTDIR="$pkgdir" install-gcc

  if [ "$PKG_STAGE" -ge 2 ]; then
    make DESTDIR="$pkgdir" install-target-libgcc
  fi

  if "$PKG_STAGE" -ge 9 ]; then
    make DESTDIR="$pkgdir" install
  fi

  # Remove files that could conflict with host GCC.
  rm -r "${pkgdir}/usr/share/info"
  rm -r "${pkgdir}/usr/share/man/man7"
}
